// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.
#include "hiloapache.h"
#include "niveles.h"
#include "Juego.h"
#include <iostream>
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using namespace  ::Servidor;

HiloApache::HiloApache(Niveles *nivel)
{
    this->nivel = nivel;
}

class JuegoHandler : virtual public JuegoIf {
 public:
    Niveles *nivel;
  JuegoHandler(Niveles *nivel) {
    this->nivel = nivel;
  }

  bool crearUsuario(const std::string& nombre) {
    cout << "Recibiendo nombre de usuario..."<<endl;
      return nivel->crearUsuario(nombre);
  }

  bool seleccionarNivel(const int32_t nivel) {
      cout << "Recibiendo nivel a jugar"<<endl;
    return this->nivel->Jugar(nivel);
  }

  bool atacar(const int32_t x, const int32_t y) {
    return nivel->atacar(x,y);
  }

  bool graficarEnemigosEliminados() {
    // Your implementation goes here
    printf("graficarEnemigosEliminados\n");
  }

  bool cheats(const std::string& cheat) {
    // Your implementation goes here
    printf("cheats\n");
  }

  bool DesbloquearNiveleGema(const int32_t nivel) {
    // Your implementation goes here
    printf("DesbloquearNiveleGema\n");
  }

  bool graficarPunteoLista() {
    // Your implementation goes here
    printf("graficarPunteoLista\n");
  }

  bool graficarPunteoArbol() {
    // Your implementation goes here
    printf("graficarPunteoArbol\n");
  }

  bool pausar() {
    // Your implementation goes here
    printf("pausar\n");
  }

  void setMin(const int32_t min) {
    // Your implementation goes here
    printf("setMin\n");
  }

  void setSeg(const int32_t seg) {
    // Your implementation goes here
    printf("setSeg\n");
  }

};

void HiloApache::run()
{
    int port = 9090;
    ::apache::thrift::stdcxx::shared_ptr<JuegoHandler> handler(new JuegoHandler(this->nivel));
    ::apache::thrift::stdcxx::shared_ptr<TProcessor> processor(new JuegoProcessor(handler));
    ::apache::thrift::stdcxx::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
    ::apache::thrift::stdcxx::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
    ::apache::thrift::stdcxx::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

    TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
    server.serve();
}

