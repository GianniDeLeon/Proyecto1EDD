// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.
#include "hiloapache.h"
#include "niveles.h"
#include "Juego.h"
#include <iostream>
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using namespace  ::Servidor;

HiloApache::HiloApache(Niveles *nivel,QTextEdit *texto)
{
    this->nivel = nivel;
    this->texto = texto;
}

class JuegoHandler : virtual public JuegoIf {
 public:
    Niveles *nivel;
    QTextEdit *texto;
  JuegoHandler(Niveles *nivel,QTextEdit *texto) {
    this->nivel = nivel;
      this->texto = texto;
  }

  bool crearUsuario(const std::string& nombre) {
    texto->append("201503823@Gianni:~ Recibiendo conexcion de cliente...");
    texto->append("201503823@Gianni:~ Creando usuario");
      return nivel->crearUsuario(nombre);
  }

  bool seleccionarNivel(const int32_t nivel) {
      QString printable = QStringLiteral("201503823@Gianni:~ Buscando nivel %1").arg(nivel);
    texto->append(printable);
    texto->append("201503823@Gianni:~ Iniciando juego");
    return this->nivel->Jugar(nivel);
  }

  bool atacar(const int32_t x, const int32_t y) {
       QString printable = QStringLiteral("201503823@Gianni:~ Iniciando ataque en X: %1 Y: %2").arg(x).arg(y);
    texto->append(printable);
    return nivel->atacar(x,y);
  }

  int32_t getPunteo() {
      texto->append("201503823@Gianni:~ Retornando punteo del jugador");
      return nivel->getPunteo();
    }

  bool graficarEnemigosEliminados() {
    nivel->graficarLisEnemigosElim();
    texto->append("201503823@Gianni:~ Graficando enemigos eliminados");
    return true;
  }

  bool cheats(const std::string& cheat) {
    texto->append("201503823@Gianni:~ Activando cheat");
    return nivel->onOffCheat();
  }

  bool DesbloquearNiveleGema(const int32_t nivel) {
      QString printable = QStringLiteral("201503823@Gianni:~ Desbloqueando el nivel: %1 con una gema").arg(nivel);
      texto->append(printable);
    return this->nivel->desbloquearNivelGema(nivel);
  }

  bool graficarPunteoLista() {
    nivel->graficarLisUsuario();
    texto->append("201503823@Gianni:~ Graficando lista de punteos general");
    return true;
  }

  bool graficarPunteoArbol() {
    nivel->graficarArbol();
    texto->append("201503823@Gianni:~ Graficando lista de punteos personales en arbol");
    return true;
  }

  bool pausar() {
    nivel->pausar();
    texto->append("201503823@Gianni:~ Pausando el la creaciondel juego");
    return true;
  }

  void setMin(const int32_t min) {
    nivel->min = min;
  }

  void setSeg(const int32_t seg) {
    nivel->seg = seg;
  }

  void finalizar() {
      //nivel->graficarLisEnemigosElim();
      nivel->finjuego();
      texto->append("201503823@Gianni:~ Fianlizando juego");
    }

  int32_t getCantGemas() {
       texto->append("201503823@Gianni:~ Retornando cantidad de gemas");
      return nivel->getCantGemas();
    }

    bool buscarUsuario(const std::string& nombre) {
        texto->append("201503823@Gianni:~ Buscando usuario...");
      return nivel->buscarUsuario(nombre);
    }

    bool ganoNivel() {
      texto->append("201503823@Gianni:~ Verificando el punteo con el minimo del nivel");
      return nivel->ganoNivel();
    }

    void graficarNiveles() {
      texto->append("201503823@Gianni:~ Graficando lista de niveles");
      nivel->graficarNiveles();
    }
};

void HiloApache::run()
{
    int port = 9090;
    ::apache::thrift::stdcxx::shared_ptr<JuegoHandler> handler(new JuegoHandler(this->nivel,this->texto));
    ::apache::thrift::stdcxx::shared_ptr<TProcessor> processor(new JuegoProcessor(handler));
    ::apache::thrift::stdcxx::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
    ::apache::thrift::stdcxx::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
    ::apache::thrift::stdcxx::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

    TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
    server.serve();
}

