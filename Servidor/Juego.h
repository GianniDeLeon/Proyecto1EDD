/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Juego_H
#define Juego_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "Servidor_types.h"

namespace Servidor {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class JuegoIf {
 public:
  virtual ~JuegoIf() {}
  virtual bool atacar(const int32_t x, const int32_t y) = 0;
};

class JuegoIfFactory {
 public:
  typedef JuegoIf Handler;

  virtual ~JuegoIfFactory() {}

  virtual JuegoIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(JuegoIf* /* handler */) = 0;
};

class JuegoIfSingletonFactory : virtual public JuegoIfFactory {
 public:
  JuegoIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<JuegoIf>& iface) : iface_(iface) {}
  virtual ~JuegoIfSingletonFactory() {}

  virtual JuegoIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(JuegoIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<JuegoIf> iface_;
};

class JuegoNull : virtual public JuegoIf {
 public:
  virtual ~JuegoNull() {}
  bool atacar(const int32_t /* x */, const int32_t /* y */) {
    bool _return = false;
    return _return;
  }
};

typedef struct _Juego_atacar_args__isset {
  _Juego_atacar_args__isset() : x(false), y(false) {}
  bool x :1;
  bool y :1;
} _Juego_atacar_args__isset;

class Juego_atacar_args {
 public:

  Juego_atacar_args(const Juego_atacar_args&);
  Juego_atacar_args& operator=(const Juego_atacar_args&);
  Juego_atacar_args() : x(0), y(0) {
  }

  virtual ~Juego_atacar_args() throw();
  int32_t x;
  int32_t y;

  _Juego_atacar_args__isset __isset;

  void __set_x(const int32_t val);

  void __set_y(const int32_t val);

  bool operator == (const Juego_atacar_args & rhs) const
  {
    if (!(x == rhs.x))
      return false;
    if (!(y == rhs.y))
      return false;
    return true;
  }
  bool operator != (const Juego_atacar_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Juego_atacar_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Juego_atacar_pargs {
 public:


  virtual ~Juego_atacar_pargs() throw();
  const int32_t* x;
  const int32_t* y;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Juego_atacar_result__isset {
  _Juego_atacar_result__isset() : success(false) {}
  bool success :1;
} _Juego_atacar_result__isset;

class Juego_atacar_result {
 public:

  Juego_atacar_result(const Juego_atacar_result&);
  Juego_atacar_result& operator=(const Juego_atacar_result&);
  Juego_atacar_result() : success(0) {
  }

  virtual ~Juego_atacar_result() throw();
  bool success;

  _Juego_atacar_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const Juego_atacar_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Juego_atacar_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Juego_atacar_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Juego_atacar_presult__isset {
  _Juego_atacar_presult__isset() : success(false) {}
  bool success :1;
} _Juego_atacar_presult__isset;

class Juego_atacar_presult {
 public:


  virtual ~Juego_atacar_presult() throw();
  bool* success;

  _Juego_atacar_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class JuegoClient : virtual public JuegoIf {
 public:
  JuegoClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  JuegoClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool atacar(const int32_t x, const int32_t y);
  void send_atacar(const int32_t x, const int32_t y);
  bool recv_atacar();
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class JuegoProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<JuegoIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (JuegoProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_atacar(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  JuegoProcessor(::apache::thrift::stdcxx::shared_ptr<JuegoIf> iface) :
    iface_(iface) {
    processMap_["atacar"] = &JuegoProcessor::process_atacar;
  }

  virtual ~JuegoProcessor() {}
};

class JuegoProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  JuegoProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< JuegoIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< JuegoIfFactory > handlerFactory_;
};

class JuegoMultiface : virtual public JuegoIf {
 public:
  JuegoMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<JuegoIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~JuegoMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<JuegoIf> > ifaces_;
  JuegoMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<JuegoIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  bool atacar(const int32_t x, const int32_t y) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->atacar(x, y);
    }
    return ifaces_[i]->atacar(x, y);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class JuegoConcurrentClient : virtual public JuegoIf {
 public:
  JuegoConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  JuegoConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool atacar(const int32_t x, const int32_t y);
  int32_t send_atacar(const int32_t x, const int32_t y);
  bool recv_atacar(const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
