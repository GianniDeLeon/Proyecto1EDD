/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Juego_H
#define Juego_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "Servidor_types.h"

namespace Servidor {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class JuegoIf {
 public:
  virtual ~JuegoIf() {}
  virtual bool crearUsuario(const std::string& nombre) = 0;
  virtual bool seleccionarNivel(const int32_t nivel) = 0;
  virtual bool atacar(const int32_t x, const int32_t y) = 0;
  virtual int32_t getPunteo() = 0;
  virtual bool graficarEnemigosEliminados() = 0;
  virtual bool cheats(const std::string& cheat) = 0;
  virtual bool DesbloquearNiveleGema(const int32_t nivel) = 0;
  virtual bool graficarPunteoLista() = 0;
  virtual bool graficarPunteoArbol() = 0;
  virtual bool pausar() = 0;
  virtual void setMin(const int32_t min) = 0;
  virtual void setSeg(const int32_t seg) = 0;
  virtual void finalizar() = 0;
  virtual int32_t getCantGemas() = 0;
  virtual bool buscarUsuario(const std::string& nombre) = 0;
  virtual bool ganoNivel() = 0;
  virtual void graficarNiveles() = 0;
};

class JuegoIfFactory {
 public:
  typedef JuegoIf Handler;

  virtual ~JuegoIfFactory() {}

  virtual JuegoIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(JuegoIf* /* handler */) = 0;
};

class JuegoIfSingletonFactory : virtual public JuegoIfFactory {
 public:
  JuegoIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<JuegoIf>& iface) : iface_(iface) {}
  virtual ~JuegoIfSingletonFactory() {}

  virtual JuegoIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(JuegoIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<JuegoIf> iface_;
};

class JuegoNull : virtual public JuegoIf {
 public:
  virtual ~JuegoNull() {}
  bool crearUsuario(const std::string& /* nombre */) {
    bool _return = false;
    return _return;
  }
  bool seleccionarNivel(const int32_t /* nivel */) {
    bool _return = false;
    return _return;
  }
  bool atacar(const int32_t /* x */, const int32_t /* y */) {
    bool _return = false;
    return _return;
  }
  int32_t getPunteo() {
    int32_t _return = 0;
    return _return;
  }
  bool graficarEnemigosEliminados() {
    bool _return = false;
    return _return;
  }
  bool cheats(const std::string& /* cheat */) {
    bool _return = false;
    return _return;
  }
  bool DesbloquearNiveleGema(const int32_t /* nivel */) {
    bool _return = false;
    return _return;
  }
  bool graficarPunteoLista() {
    bool _return = false;
    return _return;
  }
  bool graficarPunteoArbol() {
    bool _return = false;
    return _return;
  }
  bool pausar() {
    bool _return = false;
    return _return;
  }
  void setMin(const int32_t /* min */) {
    return;
  }
  void setSeg(const int32_t /* seg */) {
    return;
  }
  void finalizar() {
    return;
  }
  int32_t getCantGemas() {
    int32_t _return = 0;
    return _return;
  }
  bool buscarUsuario(const std::string& /* nombre */) {
    bool _return = false;
    return _return;
  }
  bool ganoNivel() {
    bool _return = false;
    return _return;
  }
  void graficarNiveles() {
    return;
  }
};

typedef struct _Juego_crearUsuario_args__isset {
  _Juego_crearUsuario_args__isset() : nombre(false) {}
  bool nombre :1;
} _Juego_crearUsuario_args__isset;

class Juego_crearUsuario_args {
 public:

  Juego_crearUsuario_args(const Juego_crearUsuario_args&);
  Juego_crearUsuario_args& operator=(const Juego_crearUsuario_args&);
  Juego_crearUsuario_args() : nombre() {
  }

  virtual ~Juego_crearUsuario_args() throw();
  std::string nombre;

  _Juego_crearUsuario_args__isset __isset;

  void __set_nombre(const std::string& val);

  bool operator == (const Juego_crearUsuario_args & rhs) const
  {
    if (!(nombre == rhs.nombre))
      return false;
    return true;
  }
  bool operator != (const Juego_crearUsuario_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Juego_crearUsuario_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Juego_crearUsuario_pargs {
 public:


  virtual ~Juego_crearUsuario_pargs() throw();
  const std::string* nombre;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Juego_crearUsuario_result__isset {
  _Juego_crearUsuario_result__isset() : success(false) {}
  bool success :1;
} _Juego_crearUsuario_result__isset;

class Juego_crearUsuario_result {
 public:

  Juego_crearUsuario_result(const Juego_crearUsuario_result&);
  Juego_crearUsuario_result& operator=(const Juego_crearUsuario_result&);
  Juego_crearUsuario_result() : success(0) {
  }

  virtual ~Juego_crearUsuario_result() throw();
  bool success;

  _Juego_crearUsuario_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const Juego_crearUsuario_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Juego_crearUsuario_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Juego_crearUsuario_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Juego_crearUsuario_presult__isset {
  _Juego_crearUsuario_presult__isset() : success(false) {}
  bool success :1;
} _Juego_crearUsuario_presult__isset;

class Juego_crearUsuario_presult {
 public:


  virtual ~Juego_crearUsuario_presult() throw();
  bool* success;

  _Juego_crearUsuario_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Juego_seleccionarNivel_args__isset {
  _Juego_seleccionarNivel_args__isset() : nivel(false) {}
  bool nivel :1;
} _Juego_seleccionarNivel_args__isset;

class Juego_seleccionarNivel_args {
 public:

  Juego_seleccionarNivel_args(const Juego_seleccionarNivel_args&);
  Juego_seleccionarNivel_args& operator=(const Juego_seleccionarNivel_args&);
  Juego_seleccionarNivel_args() : nivel(0) {
  }

  virtual ~Juego_seleccionarNivel_args() throw();
  int32_t nivel;

  _Juego_seleccionarNivel_args__isset __isset;

  void __set_nivel(const int32_t val);

  bool operator == (const Juego_seleccionarNivel_args & rhs) const
  {
    if (!(nivel == rhs.nivel))
      return false;
    return true;
  }
  bool operator != (const Juego_seleccionarNivel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Juego_seleccionarNivel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Juego_seleccionarNivel_pargs {
 public:


  virtual ~Juego_seleccionarNivel_pargs() throw();
  const int32_t* nivel;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Juego_seleccionarNivel_result__isset {
  _Juego_seleccionarNivel_result__isset() : success(false) {}
  bool success :1;
} _Juego_seleccionarNivel_result__isset;

class Juego_seleccionarNivel_result {
 public:

  Juego_seleccionarNivel_result(const Juego_seleccionarNivel_result&);
  Juego_seleccionarNivel_result& operator=(const Juego_seleccionarNivel_result&);
  Juego_seleccionarNivel_result() : success(0) {
  }

  virtual ~Juego_seleccionarNivel_result() throw();
  bool success;

  _Juego_seleccionarNivel_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const Juego_seleccionarNivel_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Juego_seleccionarNivel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Juego_seleccionarNivel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Juego_seleccionarNivel_presult__isset {
  _Juego_seleccionarNivel_presult__isset() : success(false) {}
  bool success :1;
} _Juego_seleccionarNivel_presult__isset;

class Juego_seleccionarNivel_presult {
 public:


  virtual ~Juego_seleccionarNivel_presult() throw();
  bool* success;

  _Juego_seleccionarNivel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Juego_atacar_args__isset {
  _Juego_atacar_args__isset() : x(false), y(false) {}
  bool x :1;
  bool y :1;
} _Juego_atacar_args__isset;

class Juego_atacar_args {
 public:

  Juego_atacar_args(const Juego_atacar_args&);
  Juego_atacar_args& operator=(const Juego_atacar_args&);
  Juego_atacar_args() : x(0), y(0) {
  }

  virtual ~Juego_atacar_args() throw();
  int32_t x;
  int32_t y;

  _Juego_atacar_args__isset __isset;

  void __set_x(const int32_t val);

  void __set_y(const int32_t val);

  bool operator == (const Juego_atacar_args & rhs) const
  {
    if (!(x == rhs.x))
      return false;
    if (!(y == rhs.y))
      return false;
    return true;
  }
  bool operator != (const Juego_atacar_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Juego_atacar_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Juego_atacar_pargs {
 public:


  virtual ~Juego_atacar_pargs() throw();
  const int32_t* x;
  const int32_t* y;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Juego_atacar_result__isset {
  _Juego_atacar_result__isset() : success(false) {}
  bool success :1;
} _Juego_atacar_result__isset;

class Juego_atacar_result {
 public:

  Juego_atacar_result(const Juego_atacar_result&);
  Juego_atacar_result& operator=(const Juego_atacar_result&);
  Juego_atacar_result() : success(0) {
  }

  virtual ~Juego_atacar_result() throw();
  bool success;

  _Juego_atacar_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const Juego_atacar_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Juego_atacar_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Juego_atacar_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Juego_atacar_presult__isset {
  _Juego_atacar_presult__isset() : success(false) {}
  bool success :1;
} _Juego_atacar_presult__isset;

class Juego_atacar_presult {
 public:


  virtual ~Juego_atacar_presult() throw();
  bool* success;

  _Juego_atacar_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Juego_getPunteo_args {
 public:

  Juego_getPunteo_args(const Juego_getPunteo_args&);
  Juego_getPunteo_args& operator=(const Juego_getPunteo_args&);
  Juego_getPunteo_args() {
  }

  virtual ~Juego_getPunteo_args() throw();

  bool operator == (const Juego_getPunteo_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Juego_getPunteo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Juego_getPunteo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Juego_getPunteo_pargs {
 public:


  virtual ~Juego_getPunteo_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Juego_getPunteo_result__isset {
  _Juego_getPunteo_result__isset() : success(false) {}
  bool success :1;
} _Juego_getPunteo_result__isset;

class Juego_getPunteo_result {
 public:

  Juego_getPunteo_result(const Juego_getPunteo_result&);
  Juego_getPunteo_result& operator=(const Juego_getPunteo_result&);
  Juego_getPunteo_result() : success(0) {
  }

  virtual ~Juego_getPunteo_result() throw();
  int32_t success;

  _Juego_getPunteo_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const Juego_getPunteo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Juego_getPunteo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Juego_getPunteo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Juego_getPunteo_presult__isset {
  _Juego_getPunteo_presult__isset() : success(false) {}
  bool success :1;
} _Juego_getPunteo_presult__isset;

class Juego_getPunteo_presult {
 public:


  virtual ~Juego_getPunteo_presult() throw();
  int32_t* success;

  _Juego_getPunteo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Juego_graficarEnemigosEliminados_args {
 public:

  Juego_graficarEnemigosEliminados_args(const Juego_graficarEnemigosEliminados_args&);
  Juego_graficarEnemigosEliminados_args& operator=(const Juego_graficarEnemigosEliminados_args&);
  Juego_graficarEnemigosEliminados_args() {
  }

  virtual ~Juego_graficarEnemigosEliminados_args() throw();

  bool operator == (const Juego_graficarEnemigosEliminados_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Juego_graficarEnemigosEliminados_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Juego_graficarEnemigosEliminados_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Juego_graficarEnemigosEliminados_pargs {
 public:


  virtual ~Juego_graficarEnemigosEliminados_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Juego_graficarEnemigosEliminados_result__isset {
  _Juego_graficarEnemigosEliminados_result__isset() : success(false) {}
  bool success :1;
} _Juego_graficarEnemigosEliminados_result__isset;

class Juego_graficarEnemigosEliminados_result {
 public:

  Juego_graficarEnemigosEliminados_result(const Juego_graficarEnemigosEliminados_result&);
  Juego_graficarEnemigosEliminados_result& operator=(const Juego_graficarEnemigosEliminados_result&);
  Juego_graficarEnemigosEliminados_result() : success(0) {
  }

  virtual ~Juego_graficarEnemigosEliminados_result() throw();
  bool success;

  _Juego_graficarEnemigosEliminados_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const Juego_graficarEnemigosEliminados_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Juego_graficarEnemigosEliminados_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Juego_graficarEnemigosEliminados_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Juego_graficarEnemigosEliminados_presult__isset {
  _Juego_graficarEnemigosEliminados_presult__isset() : success(false) {}
  bool success :1;
} _Juego_graficarEnemigosEliminados_presult__isset;

class Juego_graficarEnemigosEliminados_presult {
 public:


  virtual ~Juego_graficarEnemigosEliminados_presult() throw();
  bool* success;

  _Juego_graficarEnemigosEliminados_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Juego_cheats_args__isset {
  _Juego_cheats_args__isset() : cheat(false) {}
  bool cheat :1;
} _Juego_cheats_args__isset;

class Juego_cheats_args {
 public:

  Juego_cheats_args(const Juego_cheats_args&);
  Juego_cheats_args& operator=(const Juego_cheats_args&);
  Juego_cheats_args() : cheat() {
  }

  virtual ~Juego_cheats_args() throw();
  std::string cheat;

  _Juego_cheats_args__isset __isset;

  void __set_cheat(const std::string& val);

  bool operator == (const Juego_cheats_args & rhs) const
  {
    if (!(cheat == rhs.cheat))
      return false;
    return true;
  }
  bool operator != (const Juego_cheats_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Juego_cheats_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Juego_cheats_pargs {
 public:


  virtual ~Juego_cheats_pargs() throw();
  const std::string* cheat;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Juego_cheats_result__isset {
  _Juego_cheats_result__isset() : success(false) {}
  bool success :1;
} _Juego_cheats_result__isset;

class Juego_cheats_result {
 public:

  Juego_cheats_result(const Juego_cheats_result&);
  Juego_cheats_result& operator=(const Juego_cheats_result&);
  Juego_cheats_result() : success(0) {
  }

  virtual ~Juego_cheats_result() throw();
  bool success;

  _Juego_cheats_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const Juego_cheats_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Juego_cheats_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Juego_cheats_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Juego_cheats_presult__isset {
  _Juego_cheats_presult__isset() : success(false) {}
  bool success :1;
} _Juego_cheats_presult__isset;

class Juego_cheats_presult {
 public:


  virtual ~Juego_cheats_presult() throw();
  bool* success;

  _Juego_cheats_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Juego_DesbloquearNiveleGema_args__isset {
  _Juego_DesbloquearNiveleGema_args__isset() : nivel(false) {}
  bool nivel :1;
} _Juego_DesbloquearNiveleGema_args__isset;

class Juego_DesbloquearNiveleGema_args {
 public:

  Juego_DesbloquearNiveleGema_args(const Juego_DesbloquearNiveleGema_args&);
  Juego_DesbloquearNiveleGema_args& operator=(const Juego_DesbloquearNiveleGema_args&);
  Juego_DesbloquearNiveleGema_args() : nivel(0) {
  }

  virtual ~Juego_DesbloquearNiveleGema_args() throw();
  int32_t nivel;

  _Juego_DesbloquearNiveleGema_args__isset __isset;

  void __set_nivel(const int32_t val);

  bool operator == (const Juego_DesbloquearNiveleGema_args & rhs) const
  {
    if (!(nivel == rhs.nivel))
      return false;
    return true;
  }
  bool operator != (const Juego_DesbloquearNiveleGema_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Juego_DesbloquearNiveleGema_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Juego_DesbloquearNiveleGema_pargs {
 public:


  virtual ~Juego_DesbloquearNiveleGema_pargs() throw();
  const int32_t* nivel;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Juego_DesbloquearNiveleGema_result__isset {
  _Juego_DesbloquearNiveleGema_result__isset() : success(false) {}
  bool success :1;
} _Juego_DesbloquearNiveleGema_result__isset;

class Juego_DesbloquearNiveleGema_result {
 public:

  Juego_DesbloquearNiveleGema_result(const Juego_DesbloquearNiveleGema_result&);
  Juego_DesbloquearNiveleGema_result& operator=(const Juego_DesbloquearNiveleGema_result&);
  Juego_DesbloquearNiveleGema_result() : success(0) {
  }

  virtual ~Juego_DesbloquearNiveleGema_result() throw();
  bool success;

  _Juego_DesbloquearNiveleGema_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const Juego_DesbloquearNiveleGema_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Juego_DesbloquearNiveleGema_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Juego_DesbloquearNiveleGema_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Juego_DesbloquearNiveleGema_presult__isset {
  _Juego_DesbloquearNiveleGema_presult__isset() : success(false) {}
  bool success :1;
} _Juego_DesbloquearNiveleGema_presult__isset;

class Juego_DesbloquearNiveleGema_presult {
 public:


  virtual ~Juego_DesbloquearNiveleGema_presult() throw();
  bool* success;

  _Juego_DesbloquearNiveleGema_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Juego_graficarPunteoLista_args {
 public:

  Juego_graficarPunteoLista_args(const Juego_graficarPunteoLista_args&);
  Juego_graficarPunteoLista_args& operator=(const Juego_graficarPunteoLista_args&);
  Juego_graficarPunteoLista_args() {
  }

  virtual ~Juego_graficarPunteoLista_args() throw();

  bool operator == (const Juego_graficarPunteoLista_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Juego_graficarPunteoLista_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Juego_graficarPunteoLista_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Juego_graficarPunteoLista_pargs {
 public:


  virtual ~Juego_graficarPunteoLista_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Juego_graficarPunteoLista_result__isset {
  _Juego_graficarPunteoLista_result__isset() : success(false) {}
  bool success :1;
} _Juego_graficarPunteoLista_result__isset;

class Juego_graficarPunteoLista_result {
 public:

  Juego_graficarPunteoLista_result(const Juego_graficarPunteoLista_result&);
  Juego_graficarPunteoLista_result& operator=(const Juego_graficarPunteoLista_result&);
  Juego_graficarPunteoLista_result() : success(0) {
  }

  virtual ~Juego_graficarPunteoLista_result() throw();
  bool success;

  _Juego_graficarPunteoLista_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const Juego_graficarPunteoLista_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Juego_graficarPunteoLista_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Juego_graficarPunteoLista_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Juego_graficarPunteoLista_presult__isset {
  _Juego_graficarPunteoLista_presult__isset() : success(false) {}
  bool success :1;
} _Juego_graficarPunteoLista_presult__isset;

class Juego_graficarPunteoLista_presult {
 public:


  virtual ~Juego_graficarPunteoLista_presult() throw();
  bool* success;

  _Juego_graficarPunteoLista_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Juego_graficarPunteoArbol_args {
 public:

  Juego_graficarPunteoArbol_args(const Juego_graficarPunteoArbol_args&);
  Juego_graficarPunteoArbol_args& operator=(const Juego_graficarPunteoArbol_args&);
  Juego_graficarPunteoArbol_args() {
  }

  virtual ~Juego_graficarPunteoArbol_args() throw();

  bool operator == (const Juego_graficarPunteoArbol_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Juego_graficarPunteoArbol_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Juego_graficarPunteoArbol_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Juego_graficarPunteoArbol_pargs {
 public:


  virtual ~Juego_graficarPunteoArbol_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Juego_graficarPunteoArbol_result__isset {
  _Juego_graficarPunteoArbol_result__isset() : success(false) {}
  bool success :1;
} _Juego_graficarPunteoArbol_result__isset;

class Juego_graficarPunteoArbol_result {
 public:

  Juego_graficarPunteoArbol_result(const Juego_graficarPunteoArbol_result&);
  Juego_graficarPunteoArbol_result& operator=(const Juego_graficarPunteoArbol_result&);
  Juego_graficarPunteoArbol_result() : success(0) {
  }

  virtual ~Juego_graficarPunteoArbol_result() throw();
  bool success;

  _Juego_graficarPunteoArbol_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const Juego_graficarPunteoArbol_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Juego_graficarPunteoArbol_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Juego_graficarPunteoArbol_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Juego_graficarPunteoArbol_presult__isset {
  _Juego_graficarPunteoArbol_presult__isset() : success(false) {}
  bool success :1;
} _Juego_graficarPunteoArbol_presult__isset;

class Juego_graficarPunteoArbol_presult {
 public:


  virtual ~Juego_graficarPunteoArbol_presult() throw();
  bool* success;

  _Juego_graficarPunteoArbol_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Juego_pausar_args {
 public:

  Juego_pausar_args(const Juego_pausar_args&);
  Juego_pausar_args& operator=(const Juego_pausar_args&);
  Juego_pausar_args() {
  }

  virtual ~Juego_pausar_args() throw();

  bool operator == (const Juego_pausar_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Juego_pausar_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Juego_pausar_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Juego_pausar_pargs {
 public:


  virtual ~Juego_pausar_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Juego_pausar_result__isset {
  _Juego_pausar_result__isset() : success(false) {}
  bool success :1;
} _Juego_pausar_result__isset;

class Juego_pausar_result {
 public:

  Juego_pausar_result(const Juego_pausar_result&);
  Juego_pausar_result& operator=(const Juego_pausar_result&);
  Juego_pausar_result() : success(0) {
  }

  virtual ~Juego_pausar_result() throw();
  bool success;

  _Juego_pausar_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const Juego_pausar_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Juego_pausar_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Juego_pausar_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Juego_pausar_presult__isset {
  _Juego_pausar_presult__isset() : success(false) {}
  bool success :1;
} _Juego_pausar_presult__isset;

class Juego_pausar_presult {
 public:


  virtual ~Juego_pausar_presult() throw();
  bool* success;

  _Juego_pausar_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Juego_setMin_args__isset {
  _Juego_setMin_args__isset() : min(false) {}
  bool min :1;
} _Juego_setMin_args__isset;

class Juego_setMin_args {
 public:

  Juego_setMin_args(const Juego_setMin_args&);
  Juego_setMin_args& operator=(const Juego_setMin_args&);
  Juego_setMin_args() : min(0) {
  }

  virtual ~Juego_setMin_args() throw();
  int32_t min;

  _Juego_setMin_args__isset __isset;

  void __set_min(const int32_t val);

  bool operator == (const Juego_setMin_args & rhs) const
  {
    if (!(min == rhs.min))
      return false;
    return true;
  }
  bool operator != (const Juego_setMin_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Juego_setMin_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Juego_setMin_pargs {
 public:


  virtual ~Juego_setMin_pargs() throw();
  const int32_t* min;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Juego_setMin_result {
 public:

  Juego_setMin_result(const Juego_setMin_result&);
  Juego_setMin_result& operator=(const Juego_setMin_result&);
  Juego_setMin_result() {
  }

  virtual ~Juego_setMin_result() throw();

  bool operator == (const Juego_setMin_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Juego_setMin_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Juego_setMin_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Juego_setMin_presult {
 public:


  virtual ~Juego_setMin_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Juego_setSeg_args__isset {
  _Juego_setSeg_args__isset() : seg(false) {}
  bool seg :1;
} _Juego_setSeg_args__isset;

class Juego_setSeg_args {
 public:

  Juego_setSeg_args(const Juego_setSeg_args&);
  Juego_setSeg_args& operator=(const Juego_setSeg_args&);
  Juego_setSeg_args() : seg(0) {
  }

  virtual ~Juego_setSeg_args() throw();
  int32_t seg;

  _Juego_setSeg_args__isset __isset;

  void __set_seg(const int32_t val);

  bool operator == (const Juego_setSeg_args & rhs) const
  {
    if (!(seg == rhs.seg))
      return false;
    return true;
  }
  bool operator != (const Juego_setSeg_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Juego_setSeg_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Juego_setSeg_pargs {
 public:


  virtual ~Juego_setSeg_pargs() throw();
  const int32_t* seg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Juego_setSeg_result {
 public:

  Juego_setSeg_result(const Juego_setSeg_result&);
  Juego_setSeg_result& operator=(const Juego_setSeg_result&);
  Juego_setSeg_result() {
  }

  virtual ~Juego_setSeg_result() throw();

  bool operator == (const Juego_setSeg_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Juego_setSeg_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Juego_setSeg_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Juego_setSeg_presult {
 public:


  virtual ~Juego_setSeg_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Juego_finalizar_args {
 public:

  Juego_finalizar_args(const Juego_finalizar_args&);
  Juego_finalizar_args& operator=(const Juego_finalizar_args&);
  Juego_finalizar_args() {
  }

  virtual ~Juego_finalizar_args() throw();

  bool operator == (const Juego_finalizar_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Juego_finalizar_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Juego_finalizar_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Juego_finalizar_pargs {
 public:


  virtual ~Juego_finalizar_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Juego_finalizar_result {
 public:

  Juego_finalizar_result(const Juego_finalizar_result&);
  Juego_finalizar_result& operator=(const Juego_finalizar_result&);
  Juego_finalizar_result() {
  }

  virtual ~Juego_finalizar_result() throw();

  bool operator == (const Juego_finalizar_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Juego_finalizar_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Juego_finalizar_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Juego_finalizar_presult {
 public:


  virtual ~Juego_finalizar_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Juego_getCantGemas_args {
 public:

  Juego_getCantGemas_args(const Juego_getCantGemas_args&);
  Juego_getCantGemas_args& operator=(const Juego_getCantGemas_args&);
  Juego_getCantGemas_args() {
  }

  virtual ~Juego_getCantGemas_args() throw();

  bool operator == (const Juego_getCantGemas_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Juego_getCantGemas_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Juego_getCantGemas_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Juego_getCantGemas_pargs {
 public:


  virtual ~Juego_getCantGemas_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Juego_getCantGemas_result__isset {
  _Juego_getCantGemas_result__isset() : success(false) {}
  bool success :1;
} _Juego_getCantGemas_result__isset;

class Juego_getCantGemas_result {
 public:

  Juego_getCantGemas_result(const Juego_getCantGemas_result&);
  Juego_getCantGemas_result& operator=(const Juego_getCantGemas_result&);
  Juego_getCantGemas_result() : success(0) {
  }

  virtual ~Juego_getCantGemas_result() throw();
  int32_t success;

  _Juego_getCantGemas_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const Juego_getCantGemas_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Juego_getCantGemas_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Juego_getCantGemas_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Juego_getCantGemas_presult__isset {
  _Juego_getCantGemas_presult__isset() : success(false) {}
  bool success :1;
} _Juego_getCantGemas_presult__isset;

class Juego_getCantGemas_presult {
 public:


  virtual ~Juego_getCantGemas_presult() throw();
  int32_t* success;

  _Juego_getCantGemas_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Juego_buscarUsuario_args__isset {
  _Juego_buscarUsuario_args__isset() : nombre(false) {}
  bool nombre :1;
} _Juego_buscarUsuario_args__isset;

class Juego_buscarUsuario_args {
 public:

  Juego_buscarUsuario_args(const Juego_buscarUsuario_args&);
  Juego_buscarUsuario_args& operator=(const Juego_buscarUsuario_args&);
  Juego_buscarUsuario_args() : nombre() {
  }

  virtual ~Juego_buscarUsuario_args() throw();
  std::string nombre;

  _Juego_buscarUsuario_args__isset __isset;

  void __set_nombre(const std::string& val);

  bool operator == (const Juego_buscarUsuario_args & rhs) const
  {
    if (!(nombre == rhs.nombre))
      return false;
    return true;
  }
  bool operator != (const Juego_buscarUsuario_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Juego_buscarUsuario_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Juego_buscarUsuario_pargs {
 public:


  virtual ~Juego_buscarUsuario_pargs() throw();
  const std::string* nombre;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Juego_buscarUsuario_result__isset {
  _Juego_buscarUsuario_result__isset() : success(false) {}
  bool success :1;
} _Juego_buscarUsuario_result__isset;

class Juego_buscarUsuario_result {
 public:

  Juego_buscarUsuario_result(const Juego_buscarUsuario_result&);
  Juego_buscarUsuario_result& operator=(const Juego_buscarUsuario_result&);
  Juego_buscarUsuario_result() : success(0) {
  }

  virtual ~Juego_buscarUsuario_result() throw();
  bool success;

  _Juego_buscarUsuario_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const Juego_buscarUsuario_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Juego_buscarUsuario_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Juego_buscarUsuario_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Juego_buscarUsuario_presult__isset {
  _Juego_buscarUsuario_presult__isset() : success(false) {}
  bool success :1;
} _Juego_buscarUsuario_presult__isset;

class Juego_buscarUsuario_presult {
 public:


  virtual ~Juego_buscarUsuario_presult() throw();
  bool* success;

  _Juego_buscarUsuario_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Juego_ganoNivel_args {
 public:

  Juego_ganoNivel_args(const Juego_ganoNivel_args&);
  Juego_ganoNivel_args& operator=(const Juego_ganoNivel_args&);
  Juego_ganoNivel_args() {
  }

  virtual ~Juego_ganoNivel_args() throw();

  bool operator == (const Juego_ganoNivel_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Juego_ganoNivel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Juego_ganoNivel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Juego_ganoNivel_pargs {
 public:


  virtual ~Juego_ganoNivel_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Juego_ganoNivel_result__isset {
  _Juego_ganoNivel_result__isset() : success(false) {}
  bool success :1;
} _Juego_ganoNivel_result__isset;

class Juego_ganoNivel_result {
 public:

  Juego_ganoNivel_result(const Juego_ganoNivel_result&);
  Juego_ganoNivel_result& operator=(const Juego_ganoNivel_result&);
  Juego_ganoNivel_result() : success(0) {
  }

  virtual ~Juego_ganoNivel_result() throw();
  bool success;

  _Juego_ganoNivel_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const Juego_ganoNivel_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Juego_ganoNivel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Juego_ganoNivel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Juego_ganoNivel_presult__isset {
  _Juego_ganoNivel_presult__isset() : success(false) {}
  bool success :1;
} _Juego_ganoNivel_presult__isset;

class Juego_ganoNivel_presult {
 public:


  virtual ~Juego_ganoNivel_presult() throw();
  bool* success;

  _Juego_ganoNivel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Juego_graficarNiveles_args {
 public:

  Juego_graficarNiveles_args(const Juego_graficarNiveles_args&);
  Juego_graficarNiveles_args& operator=(const Juego_graficarNiveles_args&);
  Juego_graficarNiveles_args() {
  }

  virtual ~Juego_graficarNiveles_args() throw();

  bool operator == (const Juego_graficarNiveles_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Juego_graficarNiveles_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Juego_graficarNiveles_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Juego_graficarNiveles_pargs {
 public:


  virtual ~Juego_graficarNiveles_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Juego_graficarNiveles_result {
 public:

  Juego_graficarNiveles_result(const Juego_graficarNiveles_result&);
  Juego_graficarNiveles_result& operator=(const Juego_graficarNiveles_result&);
  Juego_graficarNiveles_result() {
  }

  virtual ~Juego_graficarNiveles_result() throw();

  bool operator == (const Juego_graficarNiveles_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Juego_graficarNiveles_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Juego_graficarNiveles_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Juego_graficarNiveles_presult {
 public:


  virtual ~Juego_graficarNiveles_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class JuegoClient : virtual public JuegoIf {
 public:
  JuegoClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  JuegoClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool crearUsuario(const std::string& nombre);
  void send_crearUsuario(const std::string& nombre);
  bool recv_crearUsuario();
  bool seleccionarNivel(const int32_t nivel);
  void send_seleccionarNivel(const int32_t nivel);
  bool recv_seleccionarNivel();
  bool atacar(const int32_t x, const int32_t y);
  void send_atacar(const int32_t x, const int32_t y);
  bool recv_atacar();
  int32_t getPunteo();
  void send_getPunteo();
  int32_t recv_getPunteo();
  bool graficarEnemigosEliminados();
  void send_graficarEnemigosEliminados();
  bool recv_graficarEnemigosEliminados();
  bool cheats(const std::string& cheat);
  void send_cheats(const std::string& cheat);
  bool recv_cheats();
  bool DesbloquearNiveleGema(const int32_t nivel);
  void send_DesbloquearNiveleGema(const int32_t nivel);
  bool recv_DesbloquearNiveleGema();
  bool graficarPunteoLista();
  void send_graficarPunteoLista();
  bool recv_graficarPunteoLista();
  bool graficarPunteoArbol();
  void send_graficarPunteoArbol();
  bool recv_graficarPunteoArbol();
  bool pausar();
  void send_pausar();
  bool recv_pausar();
  void setMin(const int32_t min);
  void send_setMin(const int32_t min);
  void recv_setMin();
  void setSeg(const int32_t seg);
  void send_setSeg(const int32_t seg);
  void recv_setSeg();
  void finalizar();
  void send_finalizar();
  void recv_finalizar();
  int32_t getCantGemas();
  void send_getCantGemas();
  int32_t recv_getCantGemas();
  bool buscarUsuario(const std::string& nombre);
  void send_buscarUsuario(const std::string& nombre);
  bool recv_buscarUsuario();
  bool ganoNivel();
  void send_ganoNivel();
  bool recv_ganoNivel();
  void graficarNiveles();
  void send_graficarNiveles();
  void recv_graficarNiveles();
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class JuegoProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<JuegoIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (JuegoProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_crearUsuario(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_seleccionarNivel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_atacar(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getPunteo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_graficarEnemigosEliminados(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_cheats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DesbloquearNiveleGema(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_graficarPunteoLista(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_graficarPunteoArbol(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_pausar(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setMin(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setSeg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_finalizar(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getCantGemas(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_buscarUsuario(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ganoNivel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_graficarNiveles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  JuegoProcessor(::apache::thrift::stdcxx::shared_ptr<JuegoIf> iface) :
    iface_(iface) {
    processMap_["crearUsuario"] = &JuegoProcessor::process_crearUsuario;
    processMap_["seleccionarNivel"] = &JuegoProcessor::process_seleccionarNivel;
    processMap_["atacar"] = &JuegoProcessor::process_atacar;
    processMap_["getPunteo"] = &JuegoProcessor::process_getPunteo;
    processMap_["graficarEnemigosEliminados"] = &JuegoProcessor::process_graficarEnemigosEliminados;
    processMap_["cheats"] = &JuegoProcessor::process_cheats;
    processMap_["DesbloquearNiveleGema"] = &JuegoProcessor::process_DesbloquearNiveleGema;
    processMap_["graficarPunteoLista"] = &JuegoProcessor::process_graficarPunteoLista;
    processMap_["graficarPunteoArbol"] = &JuegoProcessor::process_graficarPunteoArbol;
    processMap_["pausar"] = &JuegoProcessor::process_pausar;
    processMap_["setMin"] = &JuegoProcessor::process_setMin;
    processMap_["setSeg"] = &JuegoProcessor::process_setSeg;
    processMap_["finalizar"] = &JuegoProcessor::process_finalizar;
    processMap_["getCantGemas"] = &JuegoProcessor::process_getCantGemas;
    processMap_["buscarUsuario"] = &JuegoProcessor::process_buscarUsuario;
    processMap_["ganoNivel"] = &JuegoProcessor::process_ganoNivel;
    processMap_["graficarNiveles"] = &JuegoProcessor::process_graficarNiveles;
  }

  virtual ~JuegoProcessor() {}
};

class JuegoProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  JuegoProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< JuegoIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< JuegoIfFactory > handlerFactory_;
};

class JuegoMultiface : virtual public JuegoIf {
 public:
  JuegoMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<JuegoIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~JuegoMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<JuegoIf> > ifaces_;
  JuegoMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<JuegoIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  bool crearUsuario(const std::string& nombre) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->crearUsuario(nombre);
    }
    return ifaces_[i]->crearUsuario(nombre);
  }

  bool seleccionarNivel(const int32_t nivel) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->seleccionarNivel(nivel);
    }
    return ifaces_[i]->seleccionarNivel(nivel);
  }

  bool atacar(const int32_t x, const int32_t y) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->atacar(x, y);
    }
    return ifaces_[i]->atacar(x, y);
  }

  int32_t getPunteo() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getPunteo();
    }
    return ifaces_[i]->getPunteo();
  }

  bool graficarEnemigosEliminados() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->graficarEnemigosEliminados();
    }
    return ifaces_[i]->graficarEnemigosEliminados();
  }

  bool cheats(const std::string& cheat) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->cheats(cheat);
    }
    return ifaces_[i]->cheats(cheat);
  }

  bool DesbloquearNiveleGema(const int32_t nivel) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DesbloquearNiveleGema(nivel);
    }
    return ifaces_[i]->DesbloquearNiveleGema(nivel);
  }

  bool graficarPunteoLista() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->graficarPunteoLista();
    }
    return ifaces_[i]->graficarPunteoLista();
  }

  bool graficarPunteoArbol() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->graficarPunteoArbol();
    }
    return ifaces_[i]->graficarPunteoArbol();
  }

  bool pausar() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->pausar();
    }
    return ifaces_[i]->pausar();
  }

  void setMin(const int32_t min) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setMin(min);
    }
    ifaces_[i]->setMin(min);
  }

  void setSeg(const int32_t seg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setSeg(seg);
    }
    ifaces_[i]->setSeg(seg);
  }

  void finalizar() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->finalizar();
    }
    ifaces_[i]->finalizar();
  }

  int32_t getCantGemas() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getCantGemas();
    }
    return ifaces_[i]->getCantGemas();
  }

  bool buscarUsuario(const std::string& nombre) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->buscarUsuario(nombre);
    }
    return ifaces_[i]->buscarUsuario(nombre);
  }

  bool ganoNivel() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ganoNivel();
    }
    return ifaces_[i]->ganoNivel();
  }

  void graficarNiveles() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->graficarNiveles();
    }
    ifaces_[i]->graficarNiveles();
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class JuegoConcurrentClient : virtual public JuegoIf {
 public:
  JuegoConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  JuegoConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool crearUsuario(const std::string& nombre);
  int32_t send_crearUsuario(const std::string& nombre);
  bool recv_crearUsuario(const int32_t seqid);
  bool seleccionarNivel(const int32_t nivel);
  int32_t send_seleccionarNivel(const int32_t nivel);
  bool recv_seleccionarNivel(const int32_t seqid);
  bool atacar(const int32_t x, const int32_t y);
  int32_t send_atacar(const int32_t x, const int32_t y);
  bool recv_atacar(const int32_t seqid);
  int32_t getPunteo();
  int32_t send_getPunteo();
  int32_t recv_getPunteo(const int32_t seqid);
  bool graficarEnemigosEliminados();
  int32_t send_graficarEnemigosEliminados();
  bool recv_graficarEnemigosEliminados(const int32_t seqid);
  bool cheats(const std::string& cheat);
  int32_t send_cheats(const std::string& cheat);
  bool recv_cheats(const int32_t seqid);
  bool DesbloquearNiveleGema(const int32_t nivel);
  int32_t send_DesbloquearNiveleGema(const int32_t nivel);
  bool recv_DesbloquearNiveleGema(const int32_t seqid);
  bool graficarPunteoLista();
  int32_t send_graficarPunteoLista();
  bool recv_graficarPunteoLista(const int32_t seqid);
  bool graficarPunteoArbol();
  int32_t send_graficarPunteoArbol();
  bool recv_graficarPunteoArbol(const int32_t seqid);
  bool pausar();
  int32_t send_pausar();
  bool recv_pausar(const int32_t seqid);
  void setMin(const int32_t min);
  int32_t send_setMin(const int32_t min);
  void recv_setMin(const int32_t seqid);
  void setSeg(const int32_t seg);
  int32_t send_setSeg(const int32_t seg);
  void recv_setSeg(const int32_t seqid);
  void finalizar();
  int32_t send_finalizar();
  void recv_finalizar(const int32_t seqid);
  int32_t getCantGemas();
  int32_t send_getCantGemas();
  int32_t recv_getCantGemas(const int32_t seqid);
  bool buscarUsuario(const std::string& nombre);
  int32_t send_buscarUsuario(const std::string& nombre);
  bool recv_buscarUsuario(const int32_t seqid);
  bool ganoNivel();
  int32_t send_ganoNivel();
  bool recv_ganoNivel(const int32_t seqid);
  void graficarNiveles();
  int32_t send_graficarNiveles();
  void recv_graficarNiveles(const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
